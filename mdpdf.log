    INFO: 2021-02-28 13:19:09,769:               log.py:   20: Logging to /srv/data/mohit/seq-rna/JIND/mdpdf.log
   DEBUG: 2021-02-28 13:19:09,769:               cli.py:   72: README.md
    INFO: 2021-02-28 13:19:09,769:         converter.py:   16: README.md
   DEBUG: 2021-02-28 13:19:09,776:      pdf_renderer.py:  446: printSegment: JIND
   DEBUG: 2021-02-28 13:19:09,781:      pdf_renderer.py:  446: printSegment: JIND is a framework for automated cell-type identification based on neural networks. It directly learns a
   DEBUG: 2021-02-28 13:19:09,784:      pdf_renderer.py:  446: printSegment: low-dimensional representation (latent code) inwhich cell-types can be reliably determined. To account for batch
   DEBUG: 2021-02-28 13:19:09,785:      pdf_renderer.py:  446: printSegment: effects, JIND performs a novel asymmetric alignment in which the transcriptomic profileof unseen cells is mapped
   DEBUG: 2021-02-28 13:19:09,786:      pdf_renderer.py:  446: printSegment: onto the previously learned latent space, hence avoiding the need of retraining the model whenever a new dataset
   DEBUG: 2021-02-28 13:19:09,787:      pdf_renderer.py:  446: printSegment: becomes available. JIND also learns cell-type-specific confidence thresholds to identify and reject cells that cannot
   DEBUG: 2021-02-28 13:19:09,787:      pdf_renderer.py:  446: printSegment: be reliably classified. We show on datasets with and without batch effects that JIND classifies cells more accurately
   DEBUG: 2021-02-28 13:19:09,788:      pdf_renderer.py:  446: printSegment: than previously proposed methods while rejecting only a small proportion of cells. Moreover, JIND batch alignment
   DEBUG: 2021-02-28 13:19:09,788:      pdf_renderer.py:  446: printSegment: is parallelizable, being more than five or six times faster than Seurat integration.
   DEBUG: 2021-02-28 13:19:09,790:      pdf_renderer.py:  446: printSegment: <img src="/figs/JINDOverviewIllustration-1.png" width="900px"/>
   DEBUG: 2021-02-28 13:19:09,793:      pdf_renderer.py:  446: printSegment: Prerequisites
   DEBUG: 2021-02-28 13:19:09,793:      pdf_renderer.py:  446: printSegment:  1 
   DEBUG: 2021-02-28 13:19:09,794:      pdf_renderer.py:  446: printSegment: Linux or macOS
   DEBUG: 2021-02-28 13:19:09,794:      pdf_renderer.py:  446: printSegment:  2 
   DEBUG: 2021-02-28 13:19:09,794:      pdf_renderer.py:  446: printSegment: Miniconda
   DEBUG: 2021-02-28 13:19:09,794:      pdf_renderer.py:  446: printSegment:  3 
   DEBUG: 2021-02-28 13:19:09,794:      pdf_renderer.py:  446: printSegment: Python 3.6 or + (tested on 3.6.8)
   DEBUG: 2021-02-28 13:19:09,795:      pdf_renderer.py:  446: printSegment:  4 
   DEBUG: 2021-02-28 13:19:09,795:      pdf_renderer.py:  446: printSegment: CPU or NVIDIA GPU + CUDA CuDNN
   DEBUG: 2021-02-28 13:19:09,795:      pdf_renderer.py:  446: printSegment: Installation (takes 5 minutes)
   DEBUG: 2021-02-28 13:19:09,795:      pdf_renderer.py:  446: printSegment: git clone https://github.com/mohit1997/JIND.git
   DEBUG: 2021-02-28 13:19:09,795:      pdf_renderer.py:  446: printSegment: cd JIND
   DEBUG: 2021-02-28 13:19:09,796:      pdf_renderer.py:  446: printSegment: conda create -n jind python=3.6.8
   DEBUG: 2021-02-28 13:19:09,796:      pdf_renderer.py:  446: printSegment: conda activate jind
   DEBUG: 2021-02-28 13:19:09,796:      pdf_renderer.py:  446: printSegment: pip install -e .
   DEBUG: 2021-02-28 13:19:09,796:      pdf_renderer.py:  446: printSegment: Examples
   DEBUG: 2021-02-28 13:19:09,796:      pdf_renderer.py:  446: printSegment: Demo Notebooks are avaliable here 
   DEBUG: 2021-02-28 13:19:09,797:      pdf_renderer.py:  446: printSegment: PBMC Demo
   ERROR: 2021-02-28 13:19:09,797:      pdf_renderer.py:  206: /srv/data/mohit/seq-rna/JIND/README.md:26: /notebooks/PBMC-demo.ipynb: No such file or directory
   DEBUG: 2021-02-28 13:19:09,797:      pdf_renderer.py:  446: printSegment: , 
   DEBUG: 2021-02-28 13:19:09,797:      pdf_renderer.py:  446: printSegment: PBMC Scratch
   ERROR: 2021-02-28 13:19:09,797:      pdf_renderer.py:  206: /srv/data/mohit/seq-rna/JIND/README.md:26: /notebooks/Process-data.ipynb: No such file or directory
   DEBUG: 2021-02-28 13:19:09,797:      pdf_renderer.py:  446: printSegment: To run a jupyer notebook, run the following command in 
   DEBUG: 2021-02-28 13:19:09,798:      pdf_renderer.py:  446: printSegment: JIND
   DEBUG: 2021-02-28 13:19:09,798:      pdf_renderer.py:  446: printSegment:  directory
   DEBUG: 2021-02-28 13:19:09,798:      pdf_renderer.py:  446: printSegment: jupyter notebook
   DEBUG: 2021-02-28 13:19:09,798:      pdf_renderer.py:  446: printSegment:  1 
   DEBUG: 2021-02-28 13:19:09,798:      pdf_renderer.py:  446: printSegment: PBMC Demo
   ERROR: 2021-02-28 13:19:09,799:      pdf_renderer.py:  206: /srv/data/mohit/seq-rna/JIND/README.md:32: /notebooks/PBMC-demo.ipynb: No such file or directory
   DEBUG: 2021-02-28 13:19:09,799:      pdf_renderer.py:  446: printSegment:  uses provided data to run JIND. It takes less then 5 minutes to finish. The expected
   DEBUG: 2021-02-28 13:19:09,799:      pdf_renderer.py:  446: printSegment: output is provided as an 
   DEBUG: 2021-02-28 13:19:09,799:      pdf_renderer.py:  446: printSegment: HTML file
   ERROR: 2021-02-28 13:19:09,799:      pdf_renderer.py:  206: /srv/data/mohit/seq-rna/JIND/README.md:32: /notebooks/PBMC-demo.html: No such file or directory
   DEBUG: 2021-02-28 13:19:09,800:      pdf_renderer.py:  446: printSegment: .
   DEBUG: 2021-02-28 13:19:09,800:      pdf_renderer.py:  446: printSegment:  2 
   DEBUG: 2021-02-28 13:19:09,800:      pdf_renderer.py:  446: printSegment: PBMC Scratch
   ERROR: 2021-02-28 13:19:09,800:      pdf_renderer.py:  206: /srv/data/mohit/seq-rna/JIND/README.md:33: /notebooks/PBMC-demo.ipynb: No such file or directory
   DEBUG: 2021-02-28 13:19:09,800:      pdf_renderer.py:  446: printSegment:  downloads raw data and creates source and target batch before running JIND. It
   DEBUG: 2021-02-28 13:19:09,800:      pdf_renderer.py:  446: printSegment: takes less then 5 minutes to finish. The expected output is provided as an 
   DEBUG: 2021-02-28 13:19:09,801:      pdf_renderer.py:  446: printSegment: HTML file
   ERROR: 2021-02-28 13:19:09,801:      pdf_renderer.py:  206: /srv/data/mohit/seq-rna/JIND/README.md:33: /notebooks/Process-data.html: No such file or directory
   DEBUG: 2021-02-28 13:19:09,801:      pdf_renderer.py:  446: printSegment: .
   DEBUG: 2021-02-28 13:19:09,801:      pdf_renderer.py:  446: printSegment: Note: Please use a browser such as Google Chrome or Mozilla Firefox to view the provided HTML files.
   DEBUG: 2021-02-28 13:19:09,801:      pdf_renderer.py:  446: printSegment: Executing JIND
   DEBUG: 2021-02-28 13:19:09,802:      pdf_renderer.py:  446: printSegment: 1. Data
   DEBUG: 2021-02-28 13:19:09,802:      pdf_renderer.py:  446: printSegment: from jind import JindLib
   DEBUG: 2021-02-28 13:19:09,802:      pdf_renderer.py:  446: printSegment: source_batch # Contains source batch gene expression matrix and
   DEBUG: 2021-02-28 13:19:09,802:      pdf_renderer.py:  446: printSegment: cell types
   DEBUG: 2021-02-28 13:19:09,803:      pdf_renderer.py:  446: printSegment: target_batch # Contains target batch gene expression matrix and
   DEBUG: 2021-02-28 13:19:09,803:      pdf_renderer.py:  446: printSegment: cell types
   DEBUG: 2021-02-28 13:19:09,803:      pdf_renderer.py:  446: printSegment: train_labels = source_batch['labels'] # extract cell-types (Cells X
   DEBUG: 2021-02-28 13:19:09,803:      pdf_renderer.py:  446: printSegment: 1)
   DEBUG: 2021-02-28 13:19:09,803:      pdf_renderer.py:  446: printSegment: train_gene_mat =  source_batch.drop(['labels'], 1) # extract gene
   DEBUG: 2021-02-28 13:19:09,804:      pdf_renderer.py:  446: printSegment: expression matrix (Cells X Genes)
   DEBUG: 2021-02-28 13:19:09,805:      pdf_renderer.py:  446: printSegment: test_labels = target_batch['labels'] # extract cell-types (Cells X
   DEBUG: 2021-02-28 13:19:09,805:      pdf_renderer.py:  446: printSegment: 1)
   DEBUG: 2021-02-28 13:19:09,805:      pdf_renderer.py:  446: printSegment: test_gene_mat =  target_batch.drop(['labels'], 1) # extract gene
   DEBUG: 2021-02-28 13:19:09,805:      pdf_renderer.py:  446: printSegment: expression matrix (Cells X Genes)
   DEBUG: 2021-02-28 13:19:09,806:      pdf_renderer.py:  446: printSegment: # Select common genes and use the same ordering for train and the
   DEBUG: 2021-02-28 13:19:09,806:      pdf_renderer.py:  446: printSegment: test gene matrices
   DEBUG: 2021-02-28 13:19:09,806:      pdf_renderer.py:  446: printSegment: common_genes =
   DEBUG: 2021-02-28 13:19:09,806:      pdf_renderer.py:  446: printSegment: list(set(train_gene_mat.columns).intersection(set(test_gene_mat.columns)))
   DEBUG: 2021-02-28 13:19:09,806:      pdf_renderer.py:  446: printSegment: common_genes.sort()
   DEBUG: 2021-02-28 13:19:09,806:      pdf_renderer.py:  446: printSegment: train_gene_mat = train_gene_mat[list(common_genes)]
   DEBUG: 2021-02-28 13:19:09,807:      pdf_renderer.py:  446: printSegment: test_gene_mat = test_gene_mat[list(common_genes)]
   DEBUG: 2021-02-28 13:19:09,807:      pdf_renderer.py:  446: printSegment: 2. Create JIND Object and Train
   DEBUG: 2021-02-28 13:19:09,807:      pdf_renderer.py:  446: printSegment: # Create object
   DEBUG: 2021-02-28 13:19:09,808:      pdf_renderer.py:  446: printSegment: obj = JindLib(train_gene_mat, train_labels, path="my_results") #
   DEBUG: 2021-02-28 13:19:09,808:      pdf_renderer.py:  446: printSegment: all outputs would be saved in "my_results" directory
   DEBUG: 2021-02-28 13:19:09,808:      pdf_renderer.py:  446: printSegment: # Log transform the dataset if the data is integral
   DEBUG: 2021-02-28 13:19:09,808:      pdf_renderer.py:  446: printSegment: mat = train_gene_mat.values
   DEBUG: 2021-02-28 13:19:09,808:      pdf_renderer.py:  446: printSegment: mat_round = np.rint(mat)
   DEBUG: 2021-02-28 13:19:09,809:      pdf_renderer.py:  446: printSegment: error = np.mean(np.abs(mat - mat_round))
   DEBUG: 2021-02-28 13:19:09,809:      pdf_renderer.py:  446: printSegment: if error == 0:
   DEBUG: 2021-02-28 13:19:09,809:      pdf_renderer.py:  446: printSegment: 	print("Data is int")
   DEBUG: 2021-02-28 13:19:09,809:      pdf_renderer.py:  446: printSegment: 	obj.preprocess(count_normalize=True, logt=True)
   DEBUG: 2021-02-28 13:19:09,809:      pdf_renderer.py:  446: printSegment: # Select top 5000 genes by maximum variance (all genes are used if
   DEBUG: 2021-02-28 13:19:09,809:      pdf_renderer.py:  446: printSegment: less than 5000 are avialable)
   DEBUG: 2021-02-28 13:19:09,810:      pdf_renderer.py:  446: printSegment: obj.dim_reduction(5000, 'Var')
   DEBUG: 2021-02-28 13:19:09,810:      pdf_renderer.py:  446: printSegment: # Training hyperparameters
   DEBUG: 2021-02-28 13:19:09,810:      pdf_renderer.py:  446: printSegment: train_config = {'val_frac': 0.2, 'seed': 0, 'batch_size': 128,
   DEBUG: 2021-02-28 13:19:09,810:      pdf_renderer.py:  446: printSegment: 'cuda': False, 'epochs': 15} 
   DEBUG: 2021-02-28 13:19:09,810:      pdf_renderer.py:  446: printSegment: # val_frac : proportion of data used for validation
   DEBUG: 2021-02-28 13:19:09,811:      pdf_renderer.py:  446: printSegment: # seed : random seed
   DEBUG: 2021-02-28 13:19:09,811:      pdf_renderer.py:  446: printSegment: # batch size : number of data points used for on iteration of
   DEBUG: 2021-02-28 13:19:09,811:      pdf_renderer.py:  446: printSegment: gradient descent
   DEBUG: 2021-02-28 13:19:09,811:      pdf_renderer.py:  446: printSegment: # cuda : True if GPU avaliable
   DEBUG: 2021-02-28 13:19:09,811:      pdf_renderer.py:  446: printSegment: # epoch : Number of epochs/passes over the whole training data
   DEBUG: 2021-02-28 13:19:09,811:      pdf_renderer.py:  446: printSegment: obj.train_classifier(train_config, cmat=True) #cmat=True plots and
   DEBUG: 2021-02-28 13:19:09,812:      pdf_renderer.py:  446: printSegment: saves the validation confusion matrix
   DEBUG: 2021-02-28 13:19:09,812:      pdf_renderer.py:  446: printSegment: # save object for later evaluation
   DEBUG: 2021-02-28 13:19:09,812:      pdf_renderer.py:  446: printSegment: obj.to_pickle("jindobj.pkl")
   DEBUG: 2021-02-28 13:19:09,812:      pdf_renderer.py:  446: printSegment: 3. JIND Asymmetric Alignment
   DEBUG: 2021-02-28 13:19:09,813:      pdf_renderer.py:  446: printSegment: # Load JIND Model. JIND doesn't save the training data for
   DEBUG: 2021-02-28 13:19:09,813:      pdf_renderer.py:  446: printSegment: efficient memory usage. Therefore training data needs to explicitly
   DEBUG: 2021-02-28 13:19:09,813:      pdf_renderer.py:  446: printSegment: provided and preprocessed again.
   DEBUG: 2021-02-28 13:19:09,813:      pdf_renderer.py:  446: printSegment: import pickle
   DEBUG: 2021-02-28 13:19:09,813:      pdf_renderer.py:  446: printSegment: path = "my_results"
   DEBUG: 2021-02-28 13:19:09,814:      pdf_renderer.py:  446: printSegment: with open('{}/jindobj.pkl'.format(path), 'rb') as f:
   DEBUG: 2021-02-28 13:19:09,814:      pdf_renderer.py:  446: printSegment: 	obj = pickle.load(f)
   DEBUG: 2021-02-28 13:19:09,814:      pdf_renderer.py:  446: printSegment: obj.raw_features = train_gene_mat.values
   DEBUG: 2021-02-28 13:19:09,815:      pdf_renderer.py:  446: printSegment: # Log transform the dataset if gene expression matrix is integral
   DEBUG: 2021-02-28 13:19:09,815:      pdf_renderer.py:  446: printSegment: mat = train_gene_mat.values
   DEBUG: 2021-02-28 13:19:09,815:      pdf_renderer.py:  446: printSegment: mat_round = np.rint(mat)
   DEBUG: 2021-02-28 13:19:09,816:      pdf_renderer.py:  446: printSegment: error = np.mean(np.abs(mat - mat_round))
   DEBUG: 2021-02-28 13:19:09,816:      pdf_renderer.py:  446: printSegment: if error == 0:
   DEBUG: 2021-02-28 13:19:09,816:      pdf_renderer.py:  446: printSegment: 	print("Data is int")
   DEBUG: 2021-02-28 13:19:09,816:      pdf_renderer.py:  446: printSegment: 	obj.preprocess(count_normalize=True, logt=True)
   DEBUG: 2021-02-28 13:19:09,816:      pdf_renderer.py:  446: printSegment: obj.dim_reduction(5000, 'Var')
   DEBUG: 2021-02-28 13:19:09,816:      pdf_renderer.py:  446: printSegment: # JIND Batch Alignment
   DEBUG: 2021-02-28 13:19:09,817:      pdf_renderer.py:  446: printSegment: train_config = {'seed': 0, 'batch_size': 128, 'cuda': False,
   DEBUG: 2021-02-28 13:19:09,817:      pdf_renderer.py:  446: printSegment:                 'epochs': 15, 'gdecay': 1e-2, 'ddecay': 1e-3,
   DEBUG: 2021-02-28 13:19:09,817:      pdf_renderer.py:  446: printSegment: 'maxcount': 7}
   DEBUG: 2021-02-28 13:19:09,817:      pdf_renderer.py:  446: printSegment: # gdecay: Generator weight decay
   DEBUG: 2021-02-28 13:19:09,817:      pdf_renderer.py:  446: printSegment: # ddecay: Discriminator weight decay
   DEBUG: 2021-02-28 13:19:09,818:      pdf_renderer.py:  446: printSegment: # maxcount: Number of total epochs  where the Generator Loss and
   DEBUG: 2021-02-28 13:19:09,818:      pdf_renderer.py:  446: printSegment: Discrimiantor Loss is less than 0.78
   DEBUG: 2021-02-28 13:19:09,818:      pdf_renderer.py:  446: printSegment: obj.remove_effect(train_gene_mat, test_gene_mat, train_config)
   DEBUG: 2021-02-28 13:19:09,818:      pdf_renderer.py:  446: printSegment: # For evaluation (test labels are needed in this case)
   DEBUG: 2021-02-28 13:19:09,818:      pdf_renderer.py:  446: printSegment: predicted_label  = obj.evaluate(test_gene_mat, test_labels,
   DEBUG: 2021-02-28 13:19:09,819:      pdf_renderer.py:  446: printSegment: frac=0.05, name="testcfmtbr.pdf", test=True)
   DEBUG: 2021-02-28 13:19:09,819:      pdf_renderer.py:  446: printSegment: # frac: outlier fraction (theta) filtering underconfident
   DEBUG: 2021-02-28 13:19:09,819:      pdf_renderer.py:  446: printSegment: predictions
   DEBUG: 2021-02-28 13:19:09,819:      pdf_renderer.py:  446: printSegment: # test: False when using JIND without batch alignment
   DEBUG: 2021-02-28 13:19:09,819:      pdf_renderer.py:  446: printSegment: # name: file name dor saving the confusion matrix. Confusion matrix
   DEBUG: 2021-02-28 13:19:09,819:      pdf_renderer.py:  446: printSegment: is not plotted if None provided.
   DEBUG: 2021-02-28 13:19:09,820:      pdf_renderer.py:  446: printSegment: # predicted_label has three columns: cellname, raw_predictions
   DEBUG: 2021-02-28 13:19:09,820:      pdf_renderer.py:  446: printSegment: (before rejection) and predictions (after rejection). If
   DEBUG: 2021-02-28 13:19:09,820:      pdf_renderer.py:  446: printSegment: test_labels are provided, then labels are added as a column in the
   DEBUG: 2021-02-28 13:19:09,820:      pdf_renderer.py:  446: printSegment: output.
   DEBUG: 2021-02-28 13:19:09,820:      pdf_renderer.py:  446: printSegment: # For just prediction (test labels are not needed in this case)
   DEBUG: 2021-02-28 13:19:09,821:      pdf_renderer.py:  446: printSegment: predicted_label  = obj.evaluate(test_gene_mat, frac=0.05,
   DEBUG: 2021-02-28 13:19:09,821:      pdf_renderer.py:  446: printSegment: name="testcfmtbr.pdf", test=True)
   DEBUG: 2021-02-28 13:19:09,821:      pdf_renderer.py:  446: printSegment: # Save the predictions for downstream tasks
   DEBUG: 2021-02-28 13:19:09,821:      pdf_renderer.py:  446: printSegment: predicted_label.to_csv("labels.csv")
   DEBUG: 2021-02-28 13:19:09,821:      pdf_renderer.py:  446: printSegment: 4. JIND+ Self Training
   DEBUG: 2021-02-28 13:19:09,822:      pdf_renderer.py:  446: printSegment: # JIND + (this step must be performed after batch alignment)
   DEBUG: 2021-02-28 13:19:09,822:      pdf_renderer.py:  446: printSegment: train_config = {'val_frac': 0.1, 'seed': 0, 'batch_size': 32,
   DEBUG: 2021-02-28 13:19:09,822:      pdf_renderer.py:  446: printSegment: 'cuda': False,
   DEBUG: 2021-02-28 13:19:09,823:      pdf_renderer.py:  446: printSegment: 				'epochs': 10}
   DEBUG: 2021-02-28 13:19:09,823:      pdf_renderer.py:  446: printSegment: obj.ftune(test_gene_mat, train_config)
   DEBUG: 2021-02-28 13:19:09,823:      pdf_renderer.py:  446: printSegment: # For evaluation
   DEBUG: 2021-02-28 13:19:09,823:      pdf_renderer.py:  446: printSegment: predicted_label  = obj.evaluate(test_gene_mat, test_labels,
   DEBUG: 2021-02-28 13:19:09,823:      pdf_renderer.py:  446: printSegment: frac=0.05, name="testcfmtbr.pdf", test=True)
   DEBUG: 2021-02-28 13:19:09,824:      pdf_renderer.py:  446: printSegment: Differential Expression Analysis
   DEBUG: 2021-02-28 13:19:09,824:      pdf_renderer.py:  446: printSegment: The scripts to perform DE Analysis provided in the paper can be accessed 
   DEBUG: 2021-02-28 13:19:09,824:      pdf_renderer.py:  446: printSegment: here
   ERROR: 2021-02-28 13:19:09,824:      pdf_renderer.py:  206: /srv/data/mohit/seq-rna/JIND/README.md:152: /JIND_DE: No such file or directory
   DEBUG: 2021-02-28 13:19:09,825:      pdf_renderer.py:   50: 0, [1, 'JIND', 1, 68.0]
   DEBUG: 2021-02-28 13:19:09,825:      pdf_renderer.py:   50: 1, [1, 'Prerequisites', 1, 218.0]
   DEBUG: 2021-02-28 13:19:09,825:      pdf_renderer.py:   50: 2, [1, 'Installation (takes 5 minutes)', 1, 302.0]
   DEBUG: 2021-02-28 13:19:09,825:      pdf_renderer.py:   50: 3, [1, 'Examples', 1, 398.0]
   DEBUG: 2021-02-28 13:19:09,825:      pdf_renderer.py:   50: 4, [2, 'Demo Notebooks are avaliable here ', 1, 424.0]
   DEBUG: 2021-02-28 13:19:09,825:      pdf_renderer.py:   50: 5, [2, 'Executing JIND', 1, 568.0]
   DEBUG: 2021-02-28 13:19:09,825:      pdf_renderer.py:   50: 6, [3, '1. Data', 1, 594.0]
   DEBUG: 2021-02-28 13:19:09,825:      pdf_renderer.py:   50: 7, [3, '2. Create JIND Object and Train', 2, 246.0]
   DEBUG: 2021-02-28 13:19:09,825:      pdf_renderer.py:   50: 8, [3, '3. JIND Asymmetric Alignment', 2, 606.0]
   DEBUG: 2021-02-28 13:19:09,825:      pdf_renderer.py:   50: 9, [3, '4. JIND+ Self Training', 3, 510.0]
   DEBUG: 2021-02-28 13:19:09,825:      pdf_renderer.py:   50: 10, [1, 'Differential Expression Analysis', 3, 650.0]
